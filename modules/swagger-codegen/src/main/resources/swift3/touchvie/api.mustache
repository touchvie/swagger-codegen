{{#operations}}//
// DiveAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire{{#usePromiseKit}}
import PromiseKit{{/usePromiseKit}}{{#useRxSwift}}
import RxSwift{{/useRxSwift}}

{{#swiftUseApiNamespace}}
extension {{projectName}}API {
{{/swiftUseApiNamespace}}

{{#description}}
/** {{description}} */{{/description}}
open class DiveAPI: APIBase {

    private static var commonHeaders : [String: String] = ["Content-Type" : "application/json",
                                                           "Accept-Language" : APIHelper.getLanguage(),
                                                           "Accept-Encoding" : "gzip",
                                                           "Connection" : "keep-alive",
                                                           "User-Agent": APIHelper.getUserAgent(_appName: UserAgentData.AppName.EMDT)];
    
    open class func updateTokenCommonHeader(){
        self.commonHeaders["Authorization"] = AuthManager.getDiveToken();
    }
    

{{#operation}}
    {{#allParams}}
    {{#isEnum}}
    /**
     * enum for parameter {{paramName}}
     */
    public enum {{paramName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} { {{#allowableValues}}{{#enumVars}}
        case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
    }

    {{/isEnum}}
    {{/allParams}}
    
    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}
     - {{httpMethod}} {{path}}{{#notes}}
     - {{{notes}}}{{/notes}}{{#subresourceOperation}}
     - subresourceOperation: {{subresourceOperation}}{{/subresourceOperation}}{{#defaultResponse}}
     - defaultResponse: {{defaultResponse}}{{/defaultResponse}}{{#authMethods}}
     - {{#isBasic}}BASIC{{/isBasic}}{{#isOAuth}}OAuth{{/isOAuth}}{{#isApiKey}}API Key{{/isApiKey}}:
       - type: {{type}}{{#keyParamName}} {{keyParamName}} {{#isKeyInQuery}}(QUERY){{/isKeyInQuery}}{{#isKeyInHeaer}}(HEADER){{/isKeyInHeaer}}{{/keyParamName}}
       - name: {{name}}{{/authMethods}}{{#responseHeaders}}
     - responseHeaders: {{responseHeaders}}{{/responseHeaders}}{{#examples}}
     - examples: {{{examples}}}{{/examples}}{{#externalDocs}}
     - externalDocs: {{externalDocs}}{{/externalDocs}}{{#hasParams}}
     {{/hasParams}}{{#allParams}}
     - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}

     - returns: RequestBuilder<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{description}}
     */
    open class func {{operationId}}WithRequestBuilder({{#bodyParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{paramName}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/bodyParams}}{{#queryParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{paramName}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/queryParams}}{{#formParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{paramName}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/formParams}}{{#pathParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{paramName}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/pathParams}}_completion: @escaping ((_ _response : Response<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>?, _ _error : Error?) -> Void), _headers : [String : String]? = nil){
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}}{{/pathParams}} path = "{{path}}"{{#pathParams}}
        path = path.replacingOccurrences(of: "{{=<% %>=}}{<%paramName%>}<%={{ }}=%>", with: "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.cleanRawValue(){{/isContainer}}{{/isEnum}})", options: .literal, range: nil){{/pathParams}}
        let URLString = {{projectName}}API.basePath + path
        {{#bodyParam}}
        let parameters = {{paramName}}{{^required}}?{{/required}}.encodeToJSON() as? [String:AnyObject]
        {{/bodyParam}}
        {{^bodyParam}}
            {{#hasFormParams}}
        let formParams: [String:Any?] = [
                {{#formParams}}
            {{> _param}}{{#hasMore}},{{/hasMore}}
                {{/formParams}}
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
            {{/hasFormParams}}
            {{^hasFormParams}}
        let parameters: [String:Any]? = nil
            {{/hasFormParams}}
        {{/bodyParam}}

        let url = NSURLComponents(string: URLString)
        {{#hasQueryParams}}
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            {{#queryParams}}
            {{> _param}}{{#hasMore}}, {{/hasMore}}
            {{/queryParams}}
        ])
        {{/hasQueryParams}}

        let requestBuilder: RequestBuilder<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>.Type = {{projectName}}API.requestBuilderFactory.getBuilder()
    
        var rb = requestBuilder.init(method: "{{httpMethod}}", URLString: (url?.string ?? URLString), parameters: parameters, isBody: {{hasBodyParam}}{{#headerParams}}{{^secondaryParam}}, headers: commonHeaders{{/secondaryParam}}{{/headerParams}})

        if(_headers != nil){
            rb.addHeaders(_headers!);
        }

          if path == "/token" {
           
            if (commonHeaders["User-Agent"]?.contains("dive")) != nil {
                
                if APIHelper.getDeviceModel().contains("iPad") {
                    rb.addHeaders( ["Authorization" :Device.iPadDive.description])
                }else{
                    rb.addHeaders( ["Authorization" :Device.iPhoneDive.description])
                }
                
            }else{
                if APIHelper.getDeviceModel().contains("iPad") {
                    rb.addHeaders( ["Authorization" :Device.iPadEMDT.description])
                }else{
                    rb.addHeaders( ["Authorization" :Device.iPhoneEMDT.description])
                }
            }
 
        }

        rb.execute ({ (_response : Response<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>?, _error : Error?) in
            
            print(_error as Any);
            print(_response as Any);
            
            //if response its good, complete the request
            if(_response != nil){

            if path == "/token" {
              AuthManager.saveDiveTokenInKeyChain(token: "Bearer " + _response!.body!.accessToken!)
                DiveAPI.updateTokenCommonHeader()
            }
                _completion(_response, _error);
            }else
            //if there is an error, check the error response
            if let _errorResponse = _error as? ErrorResponse{
                
                switch(_errorResponse){
                    case .Error(let statusCode, _, _):
                        
                        //Find Auth logic
                        switch(statusCode){
                            //Unauthorized call
                            case 401:
                            print("ERROR OF AUTH");
                            
                            // refresh token
                            AuthManager.postToken(_completion: { (_response : Response<AccessTokenResponse>?, _error : Error?) in
                                
                                //rebuild the request with the autentication correct values
                                rb = requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: commonHeaders)
                                
                                if(_headers != nil){
                                    rb.addHeaders(_headers!);
                                }
                                rb.execute ({ (_response : Response<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>?, _error : Error?) in
                                    _completion(_response, _error);
                                });
                            });


                            break;
                        
                        //for not auth errors, return the control to the call
                        default:
                            _completion(_response, _error);
                        }
                        
                    break;
                }
            }
        });

    }

{{/operation}}
}
{{#swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}
{{/operations}}
