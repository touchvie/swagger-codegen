//
// Single.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** List of related single cards. The relation type is defined by the module content type */
open class Single: RelationModule {
    public enum TypeOfRelation: String { 
        case RAWSINGLE_ENUMSINGLE = "'{raw=single, enum=Single}'"
        case RAWDUPLE_ENUMDUPLE = "'{raw=duple, enum=Duple}'"
    }
    public enum ContentType: String { 
        case RAWTRIVIAS_ENUMTRIVIAS = "'{raw=trivias, enum=Trivias}'"
        case RAWDIRECTORS_ENUMDIRECTORS = "'{raw=directors, enum=Directors}'"
        case RAWAPPEARS_IN_ENUMAPPEARS_IN = "'{raw=appears_in, enum=AppearsIn}'"
        case RAWFULL_LOOKS_ENUMFULL_LOOKS = "'{raw=full_looks, enum=FullLooks}'"
        case RAWLOOK_FASHION_ENUMLOOK_FASHION = "'{raw=look_fashion, enum=LookFashion}'"
        case RAWFASHION_SET_ENUMFASHION_SET = "'{raw=fashion_set, enum=FashionSet}'"
        case RAWFULL_HOME_ENUMFULL_HOME = "'{raw=full_home, enum=FullHome}'"
        case RAWHOME_DECO_ENUMHOME_DECO = "'{raw=home_deco, enum=HomeDeco}'"
        case RAWTRACKLIST_ENUMTRACKLIST = "'{raw=tracklist, enum=Tracklist}'"
        case RAWSOUNDS_IN_ENUMSOUNDS_IN = "'{raw=sounds_in, enum=SoundsIn}'"
        case RAWIS_PART_OF_ENUMIS_PART_OF = "'{raw=is_part_of, enum=IsPartOf}'"
        case RAWIS_CHAPTER_OF_ENUMIS_CHAPTER_OF = "'{raw=is_chapter_of, enum=IsChapterOf}'"
        case RAWWEARS_ENUMWEARS = "'{raw=wears, enum=Wears}'"
    }
    /** Relation module type, defines the contained data structure */
    public var typeOfRelation: TypeOfRelation?
    /** Single module content type, defines what kind of relations are contained in the module */
    public var contentType: ContentType?
    public var data: [Card]?

    

    // MARK: JSONEncodable
    override open func encodeToJSON() -> Any {
        var nillableDictionary = super.encodeToJSON() as? [String:Any?] ?? [String:Any?]()
        nillableDictionary["typeOfRelation"] = self.typeOfRelation?.rawValue
        nillableDictionary["content_type"] = self.contentType?.rawValue
        nillableDictionary["data"] = self.data?.encodeToJSON()
        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
